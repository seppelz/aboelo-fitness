import React, { useRef, useEffect, useState } from 'react';
import { Box, Typography, Button, Skeleton, LinearProgress, Paper, Alert } from '@mui/material';
import { saveProgress } from '../../services/progressService';
import { Exercise } from '../../types';

// Cloudinary Konfiguration
const CLOUDINARY_CLOUD_NAME = 'dtihzud16'; // Cloud Name vom Dashboard

// Mapping von einfachen IDs zu vollständigen Dateinamen basierend auf der vollständigen Liste
const VIDEO_ID_MAPPING: Record<string, string> = {
  '1': '1_qj081s',
  '2': '2_s5xqrb',
  '3': '3_zut1mi',
  '5': '5_ekyjqw',
  '6': '6_bnetzw',
  '7': '7_uyhdtj',
  '9': '9_rux8u9',
  '10': '10_i10azd',
  '11': '11_ihgw34',
  '12': '12_ykvvuo',
  '13': '13_ehgt6e',
  '15': '15_y8exbj',
  '17': '17_tppsaf',
  '20': '20_v2okek',
  '21': '21_qa0pqj',
  '22': '22_a6bpyk',
  '24': '24_rgphia',
  '25': '25_czrvvd',
  '27': '27_xvkej4',
  '28': '28_u2x6jg',
  '30': '30_lchqot',
  '31': '31_cnztct',
  '32': '32_j3mogo',
  '100': '100_qnjbdf',
  '102': '102_m9mgh2',
  '103': '103_cxvmrn',
  '105': '105_gj0kwh',
  '106': '106_oae044',
  '201': '201_xdxhlt',
  '202': '202_ecdhda',
  '204': '204_fqxhfa',
  '205': '205_aulbfd',
  '301': '301_i4iiug',
  '302': '302_a2sp2l',
  '303': '303_juen7n',
  '400': '400_dpd1pl',
  '402': '402_hx3xvt',
  '403': '403_z7atto',
  '405': '405_kcnh38',
  '406': '406_en6vg6',
  '407': '407_udrfti',
  '408': '408_aoybf9',
  '409': '409_svmaem',
  '410': '410_rv0q0g',
  '411': '411_nzs1ym',
  '500': '500_qznt6y',
  '501': '501_eohzz3',
  '502': '502_ts5srr',
  '503': '503_mvlt3v',
  '505': '505_ogukjt',
  '507': '507_yoh6ur',
  '508': '508_zggre3',
  '512': '512_metpzk',
  '513': '513_rtdxel',
  '514': '514_sg5eyp',
  '515': '515_aug5xv',
  '520': '520_onoj46',
  '521': '521_oz16wl',
  '523': '523_cbz73o',
  '550': '550_p4pyqa',
  '551': '551_ckblmp',
  '552': '552_jnzs3y'
};

// Fallback: YouTube Video-ID aus URL extrahieren (für Altdaten)
const getYouTubeId = (url: string): string => {
  const regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|&v=)([^#&?]*).*/;
  const match = url ? url.match(regExp) : null;
  return (match && match[2] && match[2].length === 11) ? match[2] : '';
};

interface ExerciseVideoProps {
  exercise: Exercise;
  onExerciseComplete: () => void;
}

const ExerciseVideo: React.FC<ExerciseVideoProps> = ({ exercise, onExerciseComplete }) => {
  const videoRef = useRef<HTMLVideoElement>(null);
  const [watchDuration, setWatchDuration] = useState(0);
  const [isComplete, setIsComplete] = useState(false);
  const [isAborted, setIsAborted] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [progressInterval, setProgressInterval] = useState<NodeJS.Timeout | null>(null);
  const [progress, setProgress] = useState(0);
  const [isLoading, setIsLoading] = useState(true);
  
  // Video-ID für Cloudinary oder YouTube
  const videoId = (exercise as any).videoId || ''; // Primäre Video-ID (entspricht dem Dateinamen in Cloudinary)
  const youtubeId = (exercise as any).youtubeVideoId || (exercise.videoUrl ? getYouTubeId(exercise.videoUrl) : ''); // Fallback
  
  // Zeittaktgeber für die Überwachung des Fortschritts
  useEffect(() => {
    if (videoRef.current && !isComplete && !isAborted) {
      const videoElement = videoRef.current;
      
      // Event-Listener für das Video-Ende
      const handleVideoEnded = () => {
        setIsComplete(true);
        handleExerciseComplete();
      };
      
      // Event-Listener für Fehler
      const handleVideoError = () => {
        setError('Beim Laden des Videos ist ein Fehler aufgetreten. Bitte versuchen Sie es später erneut.');
      };
      
      // Event-Listener für Laden abgeschlossen
      const handleVideoLoaded = () => {
        setIsLoading(false);
      };
      
      // Intervall für die Fortschrittsanzeige
      const interval = setInterval(() => {
        const currentTime = videoElement.currentTime || 0;
        setWatchDuration(Math.floor(currentTime));
        
        // Fortschrittsbalken aktualisieren
        const videoDuration = videoElement.duration || exercise.duration || 0;
        const percentage = videoDuration > 0 ? Math.min(100, Math.floor((currentTime / videoDuration) * 100)) : 0;
        setProgress(percentage);
        
        // Übung als abgeschlossen markieren, wenn sie vollständig angeschaut wurde
        if (percentage >= 98) {
          setIsComplete(true);
          clearInterval(interval);
          handleExerciseComplete();
        }
      }, 1000);
      
      setProgressInterval(interval);
      
      // Event-Listener hinzufügen
      videoElement.addEventListener('ended', handleVideoEnded);
      videoElement.addEventListener('error', handleVideoError);
      videoElement.addEventListener('loadeddata', handleVideoLoaded);
      
      // Cleanup-Funktion
      return () => {
        clearInterval(interval);
        videoElement.removeEventListener('ended', handleVideoEnded);
        videoElement.removeEventListener('error', handleVideoError);
        videoElement.removeEventListener('loadeddata', handleVideoLoaded);
      };
    }
  }, [videoRef, isComplete, isAborted, exercise.duration]);
  
  // Video Error Handler
  const onError = () => {
    setError('Beim Laden des Videos ist ein Fehler aufgetreten. Bitte versuchen Sie es später erneut.');
    setIsLoading(false);
  };
  
  // Übung als abgebrochen markieren
  const handleAbort = () => {
    setIsAborted(true);
    if (progressInterval) {
      clearInterval(progressInterval);
    }
    submitProgress(false, true);
  };
  
  // Übung als abgeschlossen markieren
  const handleExerciseComplete = () => {
    if (!isSubmitting && !isAborted) {
      submitProgress(true, false);
    }
  };
  
  // Fortschritt an Backend senden
  const submitProgress = async (completed: boolean, aborted: boolean) => {
    setIsSubmitting(true);
    try {
      await saveProgress((exercise as any)._id, completed, aborted, watchDuration);
      
      if (completed) {
        onExerciseComplete();
      }
    } catch (error) {
      console.error('Fehler beim Speichern des Fortschritts:', error);
      setError('Der Fortschritt konnte nicht gespeichert werden. Bitte versuchen Sie es später erneut.');
    } finally {
      setIsSubmitting(false);
    }
  };
  
  // URL und Typ für Cloudinary Video oder Fallback zu YouTube
  const getVideoDetails = () => {
    // Wenn eine Video-ID für Cloudinary vorhanden ist
    if (videoId) {
      try {
        // Prüfen, ob die ID im Mapping existiert (z.B. "1" -> "1_qj081s")
        const fullVideoId = VIDEO_ID_MAPPING[videoId] || videoId;
        
        // Wir haben mehrere Möglichkeiten, das Video einzubetten:
        
        // Wir verwenden jetzt die direkte Video-URL für bessere Kontrolle über Events
        return { 
          url: `https://res.cloudinary.com/${CLOUDINARY_CLOUD_NAME}/video/upload/c_fill,w_576,h_720,q_auto/${fullVideoId}.mp4`, 
          isEmbed: false 
        };
        
        // Option 2 (auskommentiert): Cloudinary Player mit speziellen Parametern
        // return { 
        //   url: `https://player.cloudinary.com/embed/?cloud_name=${CLOUDINARY_CLOUD_NAME}&public_id=${fullVideoId}&resource_type=video&controls=true&padding=0&background=white&raw_transformation=c_pad,h_720,w_576,b_white,q_auto`,
        //   isEmbed: true 
        // };
      } catch (error) {
        console.error('Fehler bei der Erstellung der Cloudinary-URL:', error);
      }
    }
    
    // Fallback zu YouTube
    if (youtubeId) {
      return {
        url: `https://www.youtube.com/embed/${youtubeId}?autoplay=1&controls=1&rel=0&fs=1`,
        isEmbed: true
      };
    }
    
    // Kein Video verfügbar
    return { url: '', isEmbed: false };
  };

  const isYoutubeVideo = !videoId && youtubeId;
  const { url: videoSource, isEmbed } = getVideoDetails();

  return (
    <Paper elevation={2} sx={{ p: 3, mb: 3 }}>
      {error && <Alert severity="error" sx={{ mb: 2 }}>{error}</Alert>}
      
      {/* Video-Bereich */}
      {videoSource ? (
        <Box sx={{ position: 'relative' }}>
          <Box sx={{ mb: 2 }}>
            <Typography variant="h6" gutterBottom>
              {exercise.title}
            </Typography>
          </Box>
          {isLoading && (
            <Skeleton variant="rectangular" width="100%" height={400} sx={{ mb: 2 }} />
          )}
          {isEmbed ? (
            // Eingebettetes Video (YouTube oder Cloudinary Player) mit exaktem Seitenverhältnis
            <Box sx={{
              display: 'flex',
              justifyContent: 'center',
              alignItems: 'center',
              width: '100%'
            }}>
              <Box sx={{
                width: '576px',      // Exakte Breite des Videos
                maxWidth: '100%',    // Responsive auf kleineren Bildschirmen
                height: '720px',     // Exakte Höhe des Videos
                maxHeight: 'calc(100vw * 720/576)', // Proportionale Höhe auf kleineren Bildschirmen
                position: 'relative',
                overflow: 'hidden',  // Verhindert Überlauf
                background: 'white'
              }}>
                <iframe
                  src={videoSource}
                  style={{
                    position: 'absolute',
                    top: 0,
                    left: 0,
                    width: '100%',
                    height: '100%',
                    border: 'none',
                    background: 'white'
                  }}
                  allow="autoplay; fullscreen"
                  allowFullScreen
                  title={exercise.title}
                  onLoad={() => setIsLoading(false)}
                  onError={onError}
                />
              </Box>
            </Box>
          ) : (
            // Direktes Video-Element für .mp4/.mpeg URLs mit seniorenfreundlichen Steuerungen
            <Box sx={{ 
              display: 'flex',
              justifyContent: 'center',
              width: '100%'
            }}>
              <Box sx={{
                width: '576px',
                maxWidth: '100%',
                position: 'relative',
              }}>
                {isLoading && (
                  <Skeleton 
                    variant="rectangular" 
                    width="100%" 
                    height={720} 
                    sx={{ 
                      bgcolor: 'rgba(0, 0, 0, 0.1)',
                      borderRadius: 1
                    }} 
                  />
                )}
                <video
                  ref={videoRef}
                  src={videoSource}
                  controls
                  autoPlay
                  playsInline
                  preload="metadata"
                  style={{
                    width: '100%',
                    height: 'auto',
                    background: 'white',
                    aspectRatio: '576/720',
                    objectFit: 'contain',
                    display: isLoading ? 'none' : 'block',
                    borderRadius: '4px',
                    boxShadow: '0 2px 8px rgba(0, 0, 0, 0.1)'
                  }}
                  onLoadStart={() => setIsLoading(true)}
                  onLoadedMetadata={(e) => {
                    // Videodauer in Exercise-Objekt aktualisieren, falls nicht vorhanden
                    const video = e.currentTarget;
                    if (video.duration && (!exercise.duration || exercise.duration === 0)) {
                      (exercise as any).duration = video.duration;
                    }
                    setIsLoading(false);
                  }}
                  onTimeUpdate={(e) => {
                    const video = e.currentTarget;
                    const currentTime = video.currentTime || 0;
                    const duration = video.duration || 0;
                    setWatchDuration(Math.floor(currentTime));
                    
                    // Fortschritt direkt aktualisieren
                    if (duration > 0) {
                      const percentage = Math.min(100, Math.floor((currentTime / duration) * 100));
                      setProgress(percentage);
                      
                      // Übung als abgeschlossen markieren, wenn sie fast vollständig angeschaut wurde
                      if (percentage >= 98 && !isComplete) {
                        setIsComplete(true);
                        handleExerciseComplete();
                      }
                    }
                  }}
                  onError={onError}
                />
            </Box>
          )}
        </Box>
      ) : (
        <Alert severity="error">
          Das Video konnte nicht geladen werden. Keine Video-ID verfügbar.
        </Alert>
      )}
      
      {/* Fortschrittsanzeige */}
      <Box sx={{ mb: 3, mt: 2 }}>
        <Typography variant="subtitle1" sx={{ mb: 1, fontWeight: 'medium', fontSize: '1.1rem' }}>
          Übungsfortschritt: <strong>{progress}%</strong>
        </Typography>
        <LinearProgress 
          variant="determinate" 
          value={progress} 
          sx={{ 
            height: 16, 
            borderRadius: 8,
            backgroundColor: '#e0e0e0',
            '& .MuiLinearProgress-bar': {
              backgroundColor: progress >= 95 ? '#4caf50' : '#2196f3'
            }
          }} 
        />
        <Typography variant="body2" sx={{ mt: 0.5, color: 'text.secondary', textAlign: 'right' }}>
          {progress < 98 ? `Noch ${98 - progress}% bis zum Abschluss` : `Übung abgeschlossen!`}
        </Typography>
      </Box>
      
      <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 2 }}>
        <Button 
          variant="outlined" 
          color="error"
          disabled={isComplete || isAborted || isSubmitting}
          onClick={handleAbort}
          size="large"
          sx={{ fontSize: '1.1rem' }}
        >
          Übung abbrechen
        </Button>
        
        {isComplete && (
          <Button 
            variant="contained" 
            color="success"
            disabled={isSubmitting}
            size="large"
            sx={{ fontSize: '1.1rem' }}
          >
            Übung abgeschlossen!
          </Button>
        )}
      </Box>
    </Paper>
  );
};

export default ExerciseVideo;
