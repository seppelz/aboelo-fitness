import React, { useRef, useEffect, useState, ReactElement } from 'react';
import { Box, Typography, Button, Skeleton, LinearProgress, Paper, Alert, useMediaQuery, useTheme, IconButton, Card, CardMedia, CardContent, Collapse, Tooltip } from '@mui/material';
import ScreenRotationIcon from '@mui/icons-material/ScreenRotation';
import PlayArrowIcon from '@mui/icons-material/PlayArrow';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';
import InfoIcon from '@mui/icons-material/Info';
import { saveProgress } from '../../services/progressService';
import { Exercise } from '../../types';

// Cloudinary Konfiguration
const CLOUDINARY_CLOUD_NAME = 'dtihzud16'; // Cloud Name vom Dashboard

// Mapping von einfachen IDs zu vollständigen Dateinamen basierend auf der vollständigen Liste
// Formatiert Zeit in Sekunden zu MM:SS Format (z.B. 90 -> "01:30")
const formatTime = (timeInSeconds: number): string => {
  const minutes = Math.floor(timeInSeconds / 60);
  const seconds = Math.floor(timeInSeconds % 60);
  return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
};

// Hilfsfunktion zum sicheren Rendern von String oder Array-Inhalten
const renderContent = (content: string | string[] | undefined): ReactElement | null => {
  if (!content) return null;
  
  if (Array.isArray(content)) {
    return (
      <>
        {content.map((item, index) => (
          <React.Fragment key={`content-${index}`}>
            {item}
            {index < content.length - 1 && <br />}
          </React.Fragment>
        ))}
      </>
    );
  } else {
    return <>{content}</>;
  }
};

const VIDEO_ID_MAPPING: Record<string, string> = {
  '1': '1_qj081s',
  '2': '2_s5xqrb',
  '3': '3_zut1mi',
  '5': '5_ekyjqw',
  '6': '6_bnetzw',
  '7': '7_uyhdtj',
  '9': '9_rux8u9',
  '10': '10_i10azd',
  '11': '11_ihgw34',
  '12': '12_ykvvuo',
  '13': '13_ehgt6e',
  '15': '15_y8exbj',
  '17': '17_tppsaf',
  '20': '20_v2okek',
  '21': '21_qa0pqj',
  '22': '22_a6bpyk',
  '24': '24_rgphia',
  '25': '25_czrvvd',
  '27': '27_xvkej4',
  '28': '28_u2x6jg',
  '30': '30_lchqot',
  '31': '31_cnztct',
  '32': '32_j3mogo',
  '100': '100_qnjbdf',
  '102': '102_m9mgh2',
  '103': '103_cxvmrn',
  '105': '105_gj0kwh',
  '106': '106_oae044',
  '201': '201_xdxhlt',
  '202': '202_ecdhda',
  '204': '204_fqxhfa',
  '205': '205_aulbfd',
  '301': '301_i4iiug',
  '302': '302_a2sp2l',
  '303': '303_juen7n',
  '400': '400_dpd1pl',
  '402': '402_hx3xvt',
  '403': '403_z7atto',
  '405': '405_kcnh38',
  '406': '406_en6vg6',
  '407': '407_udrfti',
  '408': '408_aoybf9',
  '409': '409_svmaem',
  '410': '410_rv0q0g',
  '411': '411_nzs1ym',
  '500': '500_qznt6y',
  '501': '501_eohzz3',
  '502': '502_ts5srr',
  '503': '503_mvlt3v',
  '505': '505_ogukjt',
  '507': '507_yoh6ur',
  '508': '508_zggre3',
  '512': '512_metpzk',
  '513': '513_rtdxel',
  '514': '514_sg5eyp',
  '515': '515_aug5xv',
  '520': '520_onoj46',
  '521': '521_oz16wl',
  '523': '523_cbz73o',
  '550': '550_p4pyqa',
  '551': '551_ckblmp',
  '552': '552_jnzs3y'
};

// Fallback: YouTube Video-ID aus URL extrahieren (für Altdaten)
const getYouTubeId = (url: string): string => {
  const regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|&v=)([^#&?]*).*/;
  const match = url ? url.match(regExp) : null;
  return (match && match[2] && match[2].length === 11) ? match[2] : '';
};

interface ExerciseVideoProps {
  exercise: Exercise;
  onExerciseComplete: () => void;
}

const ExerciseVideo: React.FC<ExerciseVideoProps> = ({ exercise, onExerciseComplete }) => {
  const videoRef = useRef<HTMLVideoElement>(null);
  const [watchDuration, setWatchDuration] = useState(0);
  const [isComplete, setIsComplete] = useState(false);
  const [isAborted, setIsAborted] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [progressInterval, setProgressInterval] = useState<NodeJS.Timeout | null>(null);
  const [progress, setProgress] = useState(0);
  const [isLoading, setIsLoading] = useState(true);
  const [videoDuration, setVideoDuration] = useState<number>(exercise.duration || 0);
  const [isDurationLoaded, setIsDurationLoaded] = useState(false);
  
  // Neues State für zweistufigen Übungsplayer
  const [isVideoPlaying, setIsVideoPlaying] = useState(false); // Video-Modus oder Preview-Modus
  const [instructionsExpanded, setInstructionsExpanded] = useState(!isMobile); // Standardmäßig geöffnet auf Desktop, geschlossen auf Mobil // Für mobile Ansicht: Anleitung ein-/ausklappen
  
  // Theme und Responsive Design
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));
  const isPortrait = useMediaQuery('(orientation: portrait)');
  const isLandscape = useMediaQuery('(orientation: landscape)');
  
  // Video-ID für Cloudinary oder YouTube
  const videoId = (exercise as any).videoId || ''; // Primäre Video-ID (entspricht dem Dateinamen in Cloudinary)
  const youtubeId = (exercise as any).youtubeVideoId || (exercise.videoUrl ? getYouTubeId(exercise.videoUrl) : ''); // Fallback
  
  // Zeittaktgeber für die Überwachung des Fortschritts
  useEffect(() => {
    if (videoRef.current && !isComplete && !isAborted) {
      const videoElement = videoRef.current;
      
      // Event-Listener für das Video-Ende
      const handleVideoEnded = () => {
        setIsComplete(true);
        handleExerciseComplete();
      };
      
      // Event-Listener für Fehler
      const handleVideoError = () => {
        setError('Beim Laden des Videos ist ein Fehler aufgetreten. Bitte versuchen Sie es später erneut.');
      };
      
      // Event-Listener für Laden abgeschlossen
      const handleVideoLoaded = () => {
        setIsLoading(false);
      };
      
      // Event-Listener für Metadaten geladen (inklusive Dauer)
      const handleLoadedMetadata = () => {
        if (videoElement.duration && videoElement.duration !== Infinity) {
          setVideoDuration(videoElement.duration);
          setIsDurationLoaded(true);
          // Auch im Exercise-Objekt aktualisieren für zukünftige Verwendung
          if (!exercise.duration || exercise.duration === 0) {
            (exercise as any).duration = videoElement.duration;
          }
        }
      };
      
      // Intervall für die Fortschrittsanzeige
      const interval = setInterval(() => {
        const currentTime = videoElement.currentTime || 0;
        setWatchDuration(Math.floor(currentTime));
        
        // Fortschrittsbalken nur aktualisieren, wenn Dauer bekannt ist
        if (isDurationLoaded && videoDuration > 0) {
          const percentage = Math.min(100, Math.floor((currentTime / videoDuration) * 100));
          setProgress(percentage);
          
          // Übung als abgeschlossen markieren, wenn sie vollständig angeschaut wurde
          if (percentage >= 98) {
            setIsComplete(true);
            clearInterval(interval);
            handleExerciseComplete();
          }
        }
      }, 1000);
      
      setProgressInterval(interval);
      
      // Event-Listener hinzufügen
      videoElement.addEventListener('ended', handleVideoEnded);
      videoElement.addEventListener('error', handleVideoError);
      videoElement.addEventListener('loadeddata', handleVideoLoaded);
      videoElement.addEventListener('loadedmetadata', handleLoadedMetadata);
      
      // Falls die Metadaten bereits geladen wurden (Browser-Cache)
      if (videoElement.readyState >= 1) {
        handleLoadedMetadata();
      }
      
      // Cleanup-Funktion
      return () => {
        clearInterval(interval);
        videoElement.removeEventListener('ended', handleVideoEnded);
        videoElement.removeEventListener('error', handleVideoError);
        videoElement.removeEventListener('loadeddata', handleVideoLoaded);
        videoElement.removeEventListener('loadedmetadata', handleLoadedMetadata);
      };
    }
  }, [videoRef, isComplete, isAborted, exercise, isDurationLoaded, videoDuration]);
  
  // Video Error Handler
  const onError = () => {
    setError('Beim Laden des Videos ist ein Fehler aufgetreten. Bitte versuchen Sie es später erneut.');
    setIsLoading(false);
  };
  
  // Übung als abgebrochen markieren
  const handleAbort = () => {
    setIsAborted(true);
    if (progressInterval) {
      clearInterval(progressInterval);
    }
    submitProgress(false, true);
  };
  
  // Übung als abgeschlossen markieren
  const handleExerciseComplete = () => {
    if (!isSubmitting && !isAborted) {
      submitProgress(true, false);
    }
  };
  
  // Fortschritt an Backend senden
  const submitProgress = async (completed: boolean, aborted: boolean) => {
    setIsSubmitting(true);
    try {
      await saveProgress((exercise as any)._id, completed, aborted, watchDuration);
      
      if (completed) {
        onExerciseComplete();
      }
    } catch (error) {
      console.error('Fehler beim Speichern des Fortschritts:', error);
      setError('Der Fortschritt konnte nicht gespeichert werden. Bitte versuchen Sie es später erneut.');
    } finally {
      setIsSubmitting(false);
    }
  };
  
  // URL und Typ für Cloudinary Video oder Fallback zu YouTube
  const getVideoDetails = () => {
    // Cloudinary Video verwenden, wenn videoId vorhanden und gemapped ist
    if (videoId && VIDEO_ID_MAPPING[videoId]) {
      const cloudinaryId = VIDEO_ID_MAPPING[videoId];
      
      // Direkte Video-URL mit MP4 Format erstellen
      const videoUrl = `https://res.cloudinary.com/${CLOUDINARY_CLOUD_NAME}/video/upload/q_auto,f_mp4,w_576,h_720/${cloudinaryId}.mp4`;
      const thumbnailUrl = `https://res.cloudinary.com/${CLOUDINARY_CLOUD_NAME}/video/upload/q_auto,w_576,h_720/${cloudinaryId}.jpg`;
      
      return {
        type: 'video',
        source: videoUrl,
        poster: thumbnailUrl
      };
    }
    
    // Fallback zu YouTube, wenn videoId nicht in Cloudinary gefunden wurde
    if (youtubeId) {
      return {
        type: 'youtube',
        source: `https://www.youtube.com/embed/${youtubeId}?rel=0&modestbranding=1`,
        poster: `https://img.youtube.com/vi/${youtubeId}/hqdefault.jpg`
      };
    }
    
    // Kein Video gefunden
    return { type: 'none', source: '', poster: '' };
  };

  // Video-Details abrufen
  const { type: videoType, source: videoSource, poster: videoPoster } = getVideoDetails();
  
  // Starte das Video und wechsle in den Videomodus
  const startExercise = () => {
    setIsVideoPlaying(true);
    // Bei Mobilgeräten im Hochformat einen Hinweis anzeigen
    if (isMobile && isPortrait) {
      // Optional: Hier könnte man ein Modal anzeigen
    }
  };
  
  // Zurück zur Anleitung/Vorschau
  const backToInstructions = () => {
    setIsVideoPlaying(false);
    // Video pausieren
    if (videoRef.current) {
      videoRef.current.pause();
    }
  };

  // Helper Funktion für Styling basierend auf Gerätegröße und Orientierung
  const getResponsiveStyles = () => {
    // Basis-Styles für alle Geräte
    const isLandscapeMobile = isMobile && isLandscape;
    
    const baseStyles = {
      container: {
        p: { xs: 2, sm: 3 }, 
        mb: 3,
        maxWidth: '1400px',
        mx: 'auto' // Zentriert den Container auf dem Desktop
      },
      videoContainer: {
        display: 'flex',
        flexDirection: { xs: 'column', md: 'row' } as any,
        gap: { xs: 2, sm: 3 },
        alignItems: { xs: 'center', md: 'flex-start' }
      },
      videoBox: {
        width: { xs: '100%', md: '50%' }, // 50% auf Desktop statt fester Breite
        maxWidth: { xs: '100%', md: '650px' }, // Erhöhte max-breite für Desktop
        position: 'relative',
        flex: { xs: '1 0 auto', md: '0 0 auto' } // Nutzt verfügbaren Platz besser
      },
      instructionsBox: {
        flex: 1,
        width: '100%',
        maxWidth: { md: '50%' } // Begrenzt die Breite im Desktop-Modus
      },
      playButton: {
        position: 'absolute',
        top: '50%',
        left: '50%',
        transform: 'translate(-50%, -50%)',
        fontSize: '4rem',
        color: 'white',
        backgroundColor: 'rgba(33, 150, 243, 0.8)',
        borderRadius: '50%',
        p: 2,
        '&:hover': {
          backgroundColor: 'rgba(33, 150, 243, 0.9)',
          transform: 'translate(-50%, -50%) scale(1.05)'
        }
      },
      rotationHint: {
        display: { xs: isPortrait ? 'flex' : 'none', md: 'none' },
        alignItems: 'center',
        justifyContent: 'center',
        gap: 1,
        backgroundColor: 'rgba(255, 152, 0, 0.1)',
        borderRadius: 1,
        p: 1,
        mb: 2,
        border: '1px solid rgba(255, 152, 0, 0.3)'
      }
    };
    
    return baseStyles;
  };
  
  // Styles basierend auf dem aktuellen Gerät
  const styles = getResponsiveStyles();

  // Extrahiere den Titel der Übung
  const exerciseTitle = exercise.title || 'Übung';
  
  // Formatiere die Dauer für die Anzeige in der Anleitung
  const formattedDuration = isDurationLoaded && videoDuration > 0 
    ? formatTime(videoDuration) 
    : exercise.duration > 0 
      ? formatTime(exercise.duration) 
      : 'Wird geladen...';
      
  // Rendere den zweistufigen Übungsplayer
  return (
    <Paper elevation={2} sx={styles.container}>
      {error ? (
        <Alert severity="error">{error}</Alert>
      ) : (
        <Box sx={isVideoPlaying ? styles.videoContainer : { maxWidth: '100%' }}>
          {/* Videobereich */}
          <Box sx={styles.videoBox}>
            {/* Zurück-Button im Video-Modus */}
            {isVideoPlaying && (
              <Button 
                startIcon={<ArrowBackIcon />}
                onClick={backToInstructions}
                variant="outlined"
                sx={{ mb: 2 }}
              >
                Zurück zur Anleitung
              </Button>
            )}
            
            {isVideoPlaying ? (
              // Video-Player
              <Box sx={{ position: 'relative', mb: 2 }}>
                <Box sx={{ 
                  display: 'flex',
                  justifyContent: 'center',
                  width: '100%'
                }}>
                  <Box sx={{
                    width: '576px',
                    maxWidth: '100%',
                    position: 'relative'
                  }}>
                    {isLoading && (
                      <Skeleton 
                        variant="rectangular" 
                        width="100%" 
                        height={720} 
                        sx={{ 
                          bgcolor: 'rgba(0, 0, 0, 0.1)',
                          borderRadius: 1
                        }} 
                      />
                    )}

                    {videoType === 'youtube' ? (
                      <Box sx={{
                        width: '576px',      // Exakte Breite des Videos
                        maxWidth: '100%',    // Responsive auf kleineren Bildschirmen
                        height: '720px',     // Exakte Höhe des Videos
                        maxHeight: 'calc(100vw * 720/576)', // Proportionale Höhe auf kleineren Bildschirmen
                        position: 'relative',
                        overflow: 'hidden',  // Verhindert Überlauf
                        background: 'white'
                      }}>
                        <iframe
                          src={`${videoSource}&autoplay=1`}
                          style={{
                            position: 'absolute',
                            top: 0,
                            left: 0,
                            width: '100%',
                            height: '100%',
                            border: 'none',
                            background: 'white'
                          }}
                          allow="autoplay; fullscreen"
                          allowFullScreen
                          title={exercise.title}
                          onLoad={() => setIsLoading(false)}
                          onError={onError}
                        />
                      </Box>
                    ) : (
                      <video
                        ref={videoRef}
                        src={videoSource}
                        controls
                        autoPlay
                        playsInline
                        preload="metadata"
                        style={{
                          width: '100%',
                          height: 'auto',
                          background: 'white',
                          aspectRatio: '576/720',
                          objectFit: 'contain',
                          display: isLoading ? 'none' : 'block',
                          borderRadius: '8px',
                          boxShadow: '0 2px 8px rgba(0, 0, 0, 0.1)'
                        }}
                        onLoadStart={() => setIsLoading(true)}
                        onLoadedMetadata={(e) => {
                          const video = e.currentTarget;
                          // Videodauer sofort setzen, wenn verfügbar
                          if (video.duration && video.duration !== Infinity) {
                            setVideoDuration(video.duration);
                            setIsDurationLoaded(true);
                            // Auch im Exercise-Objekt aktualisieren
                            if (!exercise.duration || exercise.duration === 0) {
                              (exercise as any).duration = video.duration;
                            }
                          }
                          setIsLoading(false);
                        }}
                        onDurationChange={(e) => {
                          // Dauer kann sich während des Ladens ändern, daher nochmals aktualisieren
                          const video = e.currentTarget;
                          if (video.duration && video.duration !== Infinity) {
                            setVideoDuration(video.duration);
                            setIsDurationLoaded(true);
                          }
                        }}
                        onCanPlayThrough={() => {
                          // Video ist vollständig geladen und kann abgespielt werden
                          setIsLoading(false);
                          // Letzte Chance, die Dauer zu erfassen
                          if (videoRef.current && videoRef.current.duration) {
                            setVideoDuration(videoRef.current.duration);
                            setIsDurationLoaded(true);
                          }
                        }}
                        onError={onError}
                      />
                    )}
                  </Box>
                </Box>
              </Box>
            ) : (
              // Vorschaubild mit Start-Button
              <Card variant="outlined" sx={{ borderRadius: 2, overflow: 'hidden' }}>
                <CardMedia
                  component="img"
                  image={videoPoster}
                  alt={exerciseTitle}
                  sx={{
                    aspectRatio: '576/720',
                    objectFit: 'cover',
                    width: '100%',
                    filter: 'brightness(0.9)'
                  }}
                />
                <CardContent sx={{ p: 1, backgroundColor: '#f5f5f5' }}>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                    <Box>
                      <Typography variant="body2" color="text.secondary">
                        Dauer: {formattedDuration}
                      </Typography>
                    </Box>
                    <Button
                      variant="contained"
                      color="primary"
                      size="large"
                      startIcon={<PlayArrowIcon />}
                      onClick={startExercise}
                      sx={{ 
                        fontSize: { xs: '0.9rem', sm: '1.1rem' },
                        fontWeight: 'bold',
                        py: { xs: 0.5, sm: 1 },
                        px: { xs: 1.5, sm: 3 }
                      }}
                    >
                      Übung starten
                    </Button>
                  </Box>
                </CardContent>
              </Card>
            )}
          </Box>

          {/* Übungsdetails und Anleitungen */}
          <Box sx={styles.instructionsBox} style={{ display: isMobile && isVideoPlaying && !instructionsExpanded ? 'none' : undefined }}>
            <Typography variant="h5" gutterBottom sx={{ fontWeight: 'bold', fontSize: { xs: '1.2rem', sm: '1.5rem' } }}>
              {exerciseTitle}
            </Typography>
            
            {/* Übungs-Infos */}
            <Box sx={{ mb: 2 }}>
              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, mb: 2 }}>
                {exercise.muscleGroup && (
                  <Typography variant="body2" component="span" sx={{ 
                    bgcolor: 'primary.light', 
                    color: 'white', 
                    py: 0.5, 
                    px: 1.5, 
                    borderRadius: 4, 
                    fontSize: '1rem' 
                  }}>
                    {exercise.muscleGroup}
                  </Typography>
                )}
                {(exercise.isSitting === true || exercise.position === 'Sitzend') && (
                  <Typography variant="body2" component="span" sx={{ 
                    bgcolor: 'success.light', 
                    color: 'white', 
                    py: 0.5, 
                    px: 1.5, 
                    borderRadius: 4, 
                    fontSize: '1rem' 
                  }}>
                    Sitzend
                  </Typography>
                )}
                {exercise.difficulty && (
                  <Typography variant="body2" component="span" sx={{ 
                    bgcolor: 'info.light', 
                    color: 'white', 
                    py: 0.5, 
                    px: 1.5, 
                    borderRadius: 4, 
                    fontSize: '1rem' 
                  }}>
                    Schwierigkeitsgrad: {exercise.difficulty}
                  </Typography>
                )}
              </Box>
            </Box>

            {/* Anleitungen für die Übung */}
            <Box sx={{ 
              mt: 3,
              '& .MuiTypography-sectionTitle': {
                fontWeight: 'bold',
                fontSize: { xs: '1.1rem', sm: '1.2rem' },
                color: 'primary.main',
                mb: 1,
                mt: 2
              },
              '& .MuiTypography-instructionText': {
                fontSize: { xs: '1rem', sm: '1.1rem' },
                lineHeight: 1.6,
                mb: 2
              }
            }}>
              {/* Vorbereitung */}
                {exercise.preparation && (
                  <>
                    <Typography variant="h6" className="MuiTypography-sectionTitle">
                      Vorbereitung:
                    </Typography>
                    <Typography variant="body1" className="MuiTypography-instructionText">
                      {renderContent(exercise.preparation)}
                    </Typography>
                  </>
                )}

              {/* Durchführung */}
                {exercise.execution && (
                  <>
                    <Typography variant="h6" className="MuiTypography-sectionTitle">
                      Durchführung:
                    </Typography>
                    <Typography variant="body1" className="MuiTypography-instructionText">
                      {renderContent(exercise.execution)}
                    </Typography>
                  </>
                )}

              {/* Ziel der Übung */}
                {exercise.goal && (
                  <>
                    <Typography variant="h6" className="MuiTypography-sectionTitle">
                      Ziel der Übung:
                    </Typography>
                    <Typography variant="body1" className="MuiTypography-instructionText">
                      {renderContent(exercise.goal)}
                    </Typography>
                  </>
                )}

              {/* Tipps */}
              {exercise.tips && (
                <>
                  <Typography variant="h6" className="MuiTypography-sectionTitle">
                    Tipps für die korrekte Ausführung:
                  </Typography>
                  <Typography variant="body1" className="MuiTypography-instructionText">
                    {exercise.tips}
                  </Typography>
                </>
              )}
            </Box>
          </Box>
        </Box>
                )}
              </Box>
          
          {/* Fortschrittsanzeige */}
          <Box sx={{ mb: 3, mt: 4 }}>
            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
              <Typography variant="subtitle1" sx={{ fontWeight: 'medium', fontSize: { xs: '1rem', sm: '1.1rem' } }}>
                Fortschritt: <strong>{isDurationLoaded ? `${progress}%` : "Wird geladen..."}</strong>
              </Typography>
              <Typography variant="subtitle1" sx={{ fontWeight: 'medium', fontSize: { xs: '1rem', sm: '1.1rem' } }}>
                {formatTime(watchDuration)} / {isDurationLoaded ? formatTime(videoDuration) : "--:--"}
              </Typography>
            </Box>
            <LinearProgress 
              variant="determinate" 
              value={isDurationLoaded ? progress : 0} 
              sx={{ 
                height: 16, 
                borderRadius: 8,
                backgroundColor: '#e0e0e0',
                '& .MuiLinearProgress-bar': {
                  backgroundColor: progress >= 95 ? '#4caf50' : '#2196f3'
                }
              }} 
            />
          </Box>

          {/* Info-Button für Anleitung in einem Popover (für Mobilgeräte) */}
          {isMobile && (
            <Tooltip title="Anleitung anzeigen" arrow>
              <IconButton 
                sx={{ 
                  position: 'fixed', 
                  bottom: 16, 
                  right: 16, 
                  bgcolor: 'primary.main',
                  color: 'white',
                  '&:hover': { bgcolor: 'primary.dark' }
                }}
                onClick={() => setInstructionsExpanded(!instructionsExpanded)}
                size="large"
              >
                <InfoIcon fontSize="large" />
              </IconButton>
            </Tooltip>
          )}

          {/* Abschluss-Buttons */}
          <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 3 }}>
            <Button 
              variant="outlined" 
              color="error"
              disabled={isComplete || isAborted || isSubmitting}
              onClick={handleAbort}
              size="large"
              sx={{ fontSize: '1.1rem' }}
            >
              Übung abbrechen
            </Button>
            
            {isComplete && (
              <Button 
                variant="contained" 
                color="success"
                disabled={isSubmitting}
                size="large"
                sx={{ fontSize: '1.1rem' }}
              >
                Übung abgeschlossen!
              </Button>
            )}
          </Box>

          {/* Anleitung für mobile Geräte nur anzeigen wenn erwünscht */}
          {isMobile && isVideoPlaying && instructionsExpanded && (
            <Box sx={{ mt: 3, bgcolor: '#f5f5f5', p: 2, borderRadius: 2, width: '100%' }}>
              <Typography variant="h6" gutterBottom>
                Übungsanleitung
              </Typography>
              {exercise.execution && (
                <Typography variant="body1" paragraph>
                  <strong>Durchführung:</strong> {renderContent(exercise.execution)}
                </Typography>
              )}
            </Box>
          )}
        </Box>
      )}
    </Paper>
  );
};

export default ExerciseVideo;
